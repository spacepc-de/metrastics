# Generated by Django 4.2.21 on 2025-05-22 14:58

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AutoReplyRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trigger_phrase', models.TextField(help_text='Auslösende Phrase oder Regex-Muster.')),
                ('match_type', models.CharField(choices=[('contains', 'Enthält'), ('exact', 'Exakte Übereinstimmung'), ('regex', 'Regulärer Ausdruck')], help_text='Art des Abgleichs der Phrase.', max_length=10)),
                ('response_message', models.TextField(help_text='Die zu sendende Antwortnachricht.')),
                ('cooldown_seconds', models.PositiveIntegerField(default=60, help_text='Minimale Zeit in Sekunden, bevor diese Regel für denselben Absender erneut ausgelöst wird.')),
                ('is_enabled', models.BooleanField(default=True, help_text='Gibt an, ob die Regel aktiv ist.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Auto-Reply Rule',
                'verbose_name_plural': 'Auto-Reply Rules',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='AverageMetricsHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.FloatField(help_text='Unix-Zeitstempel der Metrikberechnung', unique=True)),
                ('average_snr', models.FloatField(blank=True, null=True)),
                ('average_rssi', models.FloatField(blank=True, null=True)),
                ('average_battery', models.FloatField(blank=True, null=True)),
                ('average_chan_util', models.FloatField(blank=True, null=True)),
                ('average_air_util_tx', models.FloatField(blank=True, null=True)),
                ('active_node_count', models.PositiveIntegerField()),
                ('total_node_count', models.PositiveIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Average Metrics History',
                'verbose_name_plural': 'Average Metrics Histories',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Node',
            fields=[
                ('node_id', models.CharField(help_text='Knoten-ID (z.B. !aabbccdd)', max_length=24, primary_key=True, serialize=False)),
                ('node_num', models.PositiveIntegerField(blank=True, help_text='Knotennummer (ganzzahlige Darstellung der ID)', null=True, unique=True)),
                ('long_name', models.CharField(blank=True, max_length=100, null=True)),
                ('short_name', models.CharField(blank=True, max_length=20, null=True)),
                ('macaddr', models.CharField(blank=True, help_text='MAC-Adresse im Format XX:XX:XX:XX:XX:XX', max_length=17, null=True)),
                ('hw_model', models.CharField(blank=True, help_text='Hardware-Modell des Knotens', max_length=50, null=True)),
                ('firmware_version', models.CharField(blank=True, max_length=30, null=True)),
                ('role', models.CharField(blank=True, help_text='Rolle des Knotens im Netzwerk (z.B. ROUTER, CLIENT)', max_length=30, null=True)),
                ('is_local', models.BooleanField(default=False, help_text='Gibt an, ob dies der lokale Knoten ist')),
                ('last_heard', models.FloatField(blank=True, help_text='Unix-Zeitstempel des letzten empfangenen Pakets', null=True)),
                ('battery_level', models.PositiveIntegerField(blank=True, help_text='Batteriestand in Prozent (0-100), oder 255 für unbekannt/strombetrieben', null=True)),
                ('voltage', models.FloatField(blank=True, help_text='Batteriespannung in Volt', null=True)),
                ('channel_utilization', models.FloatField(blank=True, help_text='Kanal-Auslastung in Prozent', null=True)),
                ('air_util_tx', models.FloatField(blank=True, help_text='Luftschnittstellen-Auslastung (TX) in Prozent', null=True)),
                ('uptime_seconds', models.PositiveIntegerField(blank=True, help_text='Betriebszeit des Geräts in Sekunden', null=True)),
                ('snr', models.FloatField(blank=True, help_text='Signal-Rausch-Verhältnis des letzten Pakets', null=True)),
                ('rssi', models.IntegerField(blank=True, help_text='Empfangssignalstärke des letzten Pakets (typischerweise negativ)', null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('altitude', models.IntegerField(blank=True, help_text='Höhe über dem Meeresspiegel in Metern', null=True)),
                ('position_time', models.FloatField(blank=True, help_text='Unix-Zeitstempel des letzten Positionsupdates', null=True)),
                ('telemetry_time', models.FloatField(blank=True, help_text='Unix-Zeitstempel des letzten Telemetrie-Updates', null=True)),
                ('user_info', models.JSONField(blank=True, help_text='Rohe Benutzerinformationen als JSON vom Paket', null=True)),
                ('position_info', models.JSONField(blank=True, help_text='Rohe Positionsinformationen als JSON vom Paket', null=True)),
                ('device_metrics_info', models.JSONField(blank=True, help_text='Rohe Gerätemetriken als JSON von Telemetrie', null=True)),
                ('environment_metrics_info', models.JSONField(blank=True, help_text='Rohe Umgebungsmetriken als JSON von Telemetrie', null=True)),
                ('module_config_info', models.JSONField(blank=True, help_text='Rohe Modulkonfiguration als JSON von Knoteninfo', null=True)),
                ('channel_info', models.JSONField(blank=True, help_text='Rohe Kanalinformationen als JSON von Knoteninfo', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Node',
                'verbose_name_plural': 'Nodes',
                'ordering': ['node_num', 'node_id'],
            },
        ),
        migrations.CreateModel(
            name='Packet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_id', models.CharField(help_text='Eindeutiger Bezeichner für das Paketereignis', max_length=50, unique=True)),
                ('timestamp', models.FloatField(help_text='Unix-Zeitstempel des Paketempfangs/-verarbeitung')),
                ('rx_time', models.BigIntegerField(blank=True, help_text='RX-Zeit des Geräts, falls verfügbar (Unix)', null=True)),
                ('from_node_id_str', models.CharField(blank=True, db_index=True, help_text='String-ID des Absenderknotens', max_length=24, null=True)),
                ('to_node_id_str', models.CharField(blank=True, db_index=True, help_text='String-ID des Empfängerknotens (kann ^all sein)', max_length=24, null=True)),
                ('channel', models.IntegerField(blank=True, help_text='Meshtastic-Kanalindex, auf dem das Paket war', null=True)),
                ('portnum', models.CharField(blank=True, help_text='Portnum-Name (z.B. TEXT_MESSAGE_APP)', max_length=50, null=True)),
                ('packet_type', models.CharField(blank=True, db_index=True, help_text='Anwendungsbezogener Pakettyp (z.B. Message, Position)', max_length=50, null=True)),
                ('rx_snr', models.FloatField(blank=True, null=True)),
                ('rx_rssi', models.IntegerField(blank=True, null=True)),
                ('hop_limit', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('want_ack', models.BooleanField(default=False)),
                ('decoded_json', models.JSONField(blank=True, help_text='Dekodierte Nutzlast als JSON', null=True)),
                ('raw_json', models.JSONField(blank=True, help_text='Rohe Paketstruktur als JSON', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('from_node', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sent_packets', to='metrastics_listener.node')),
                ('to_node', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='received_packets', to='metrastics_listener.node')),
            ],
            options={
                'verbose_name': 'Packet',
                'verbose_name_plural': 'Packets',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='ScheduledTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nodeId', models.CharField(help_text='Zielknoten-ID für die Aufgabe (z.B. !aabbccdd oder ^all)', max_length=24)),
                ('taskType', models.CharField(help_text='Aufgabentyp (z.B. message, website_monitor)', max_length=50)),
                ('actionPayload', models.TextField(blank=True, help_text='JSON- oder String-Nutzlast für die Aktion', null=True)),
                ('cronString', models.CharField(help_text='Cron-ähnlicher String für die Zeitplanung', max_length=100)),
                ('enabled', models.BooleanField(default=True)),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
                ('updatedAt', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Scheduled Task',
                'verbose_name_plural': 'Scheduled Tasks',
                'ordering': ['-createdAt'],
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('packet', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='message_content', serialize=False, to='metrastics_listener.packet')),
                ('from_node_id_str', models.CharField(blank=True, db_index=True, max_length=24, null=True)),
                ('to_node_id_str', models.CharField(blank=True, db_index=True, max_length=24, null=True)),
                ('channel', models.IntegerField(blank=True, help_text='Ursprüngliche interne Meshtastic-Kanal-ID, auf dem die Nachricht gesendet wurde', null=True)),
                ('text', models.TextField()),
                ('timestamp', models.FloatField(help_text='Unix-Zeitstempel (identisch mit Paket)')),
                ('rx_snr', models.FloatField(blank=True, null=True)),
                ('rx_rssi', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Message',
                'verbose_name_plural': 'Messages',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Traceroute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('packet_event_id', models.CharField(help_text='Korrespondierende Paket-event_id, falls verknüpft', max_length=50, unique=True)),
                ('requester_node_id_str', models.CharField(blank=True, max_length=24, null=True)),
                ('responder_node_id_str', models.CharField(blank=True, max_length=24, null=True)),
                ('route_json', models.JSONField(help_text='Liste der Knotennummern (Integer) im Pfad')),
                ('timestamp', models.FloatField(help_text='Unix-Zeitstempel des Traceroute-Ergebnisses')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('packet', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='traceroute_info', to='metrastics_listener.packet')),
                ('requester_node', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sent_traceroutes', to='metrastics_listener.node')),
                ('responder_node', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='received_traceroutes', to='metrastics_listener.node')),
            ],
            options={
                'verbose_name': 'Traceroute',
                'verbose_name_plural': 'Traceroutes',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Telemetry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.FloatField(help_text='Unix-Zeitstempel des Telemetrie-Updates')),
                ('battery_level', models.PositiveIntegerField(blank=True, null=True)),
                ('voltage', models.FloatField(blank=True, null=True)),
                ('channel_utilization', models.FloatField(blank=True, null=True)),
                ('air_util_tx', models.FloatField(blank=True, null=True)),
                ('uptime_seconds', models.PositiveIntegerField(blank=True, null=True)),
                ('temperature', models.FloatField(blank=True, help_text='Grad Celsius', null=True)),
                ('relative_humidity', models.FloatField(blank=True, help_text='Prozent', null=True)),
                ('barometric_pressure', models.FloatField(blank=True, help_text='hPa', null=True)),
                ('gas_resistance', models.FloatField(blank=True, help_text='Ohm', null=True)),
                ('iaq', models.FloatField(blank=True, help_text='Index für Luftqualität', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='telemetry_updates', to='metrastics_listener.node')),
            ],
            options={
                'verbose_name': 'Telemetry',
                'verbose_name_plural': 'Telemetry Data',
                'ordering': ['node', '-timestamp'],
                'indexes': [models.Index(fields=['node', '-timestamp'], name='metrastics__node_id_c21cf3_idx')],
            },
        ),
        migrations.CreateModel(
            name='Position',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.FloatField(help_text='Unix-Zeitstempel des Positionsupdates')),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('altitude', models.IntegerField(blank=True, help_text='Höhe über dem Meeresspiegel in Metern', null=True)),
                ('precision_bits', models.PositiveIntegerField(blank=True, null=True)),
                ('ground_speed', models.PositiveIntegerField(blank=True, help_text='Geschwindigkeit in m/s oder Knoten (geräteabhängig)', null=True)),
                ('ground_track', models.PositiveIntegerField(blank=True, help_text='Kurs über Grund in Grad', null=True)),
                ('sats_in_view', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('pdop', models.FloatField(blank=True, null=True)),
                ('hdop', models.FloatField(blank=True, null=True)),
                ('vdop', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='positions', to='metrastics_listener.node')),
            ],
            options={
                'verbose_name': 'Position',
                'verbose_name_plural': 'Positions',
                'ordering': ['node', '-timestamp'],
                'indexes': [models.Index(fields=['node', '-timestamp'], name='metrastics__node_id_5c3171_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='packet',
            index=models.Index(fields=['timestamp'], name='metrastics__timesta_767125_idx'),
        ),
        migrations.AddIndex(
            model_name='packet',
            index=models.Index(fields=['packet_type'], name='metrastics__packet__5175a2_idx'),
        ),
        migrations.AddField(
            model_name='message',
            name='from_node',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sent_messages', to='metrastics_listener.node'),
        ),
        migrations.AddField(
            model_name='message',
            name='to_node',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='received_messages', to='metrastics_listener.node'),
        ),
    ]
